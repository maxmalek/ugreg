{
    // 0: Errors only
    // 1: normal, low-volume
    // 2: debug loglevel
    // 3: developer log (spammy!)
    // To increase the loglevel dynamically, you can also pass -v, -vv etc on the commandline
    // (If not specified: loglevel = 0 for release builds and 3 for debug builds)
    //"loglevel": 3,
    
    // --- Hosted servers ---
    // This section configures different separate webservers that can all access the global database stored in this process.

    // The identity server.
    "identity": {
        // webserver config
        "listen": [
            { "host": "0.0.0.0", "port": 8090, "ssl": false },
            //{ "host": "0.0.0.0", "port": 8091, "ssl": true }, // requires a valid cert if used
        ],
        "cert": "localhost.pem", // ignored if SSL is not used
        "listen_threads": 0,
        // intentity config
        
        // Fake presence of v1 identity server
        // Element checks for the v1 API only; enable this to suppress warnings about a non-functional identity server
        "fake_v1": true,
    },
    
    // Enable an interface to provide certain endpoints of interest that a matrix homeserver would serve.
    // Use this to handle /_matrix/client/r0/user_directory/search that usually goes to the matrix server.
    // Either use a reverse proxy to forward /_matrix/client/r0/user_directory/search to here and disable hsproxy
    // Or enable hsproxy to forward to a homeserver if you don't have a separate reverse proxy (experimental)
    "usersearch": {
        // webserver config
        "listen": [
            { "host": "0.0.0.0", "port": 8088, "ssl": false },
            //{ "host": "0.0.0.0", "port": 8089, "ssl": true }, // requires a valid cert if used
        ],
        "cert": "localhost.pem",
        "listen_threads": 0,
        // search config
        "fields": {
            // field => true to search with default params
            "mail": true,
            "phone": true,
            "realname": true,
        },
        "fuzzy": false, // Makes the search fuzzy. Best matches first. Useless+confusing if clients apply their own sort order.
        "element_hack": true, // If query is not part of a result, add it. Reqired to show mismatched result in Element.
        "displayname": "displayname", // Field to show as the display name
        //"avatar_url": "mxc://...",
        "homeserver": { "host": "localhost", "port": 8008, "ssl": false },
        "reverseproxy": true,
        "ask_homeserver": false, // forward search requests to homeserver
        "check_homeserver": false, // require homeserver to return a valid search result before we merge in our own.
        // Note: if this is disabled, there is no checking, ie. any unauthenticated user can just curl the search API!
        // The config is only secure if ask+check are both on!
        "ask_homeserver_timeout": "3s",
        
        // Include a dummy entry with some stats about the search
        // Do NOT enable this in production!
        "debug_dummy_result": true,
    },
    
    // -- Global 3pid database ---
    // Required by the identity server, otherwise unused
    "3pid": {
        "hashcache": {
            "pepperTime": "1h", // hash pepper is rotated after this time
            "pepperLen": [24, 40], // each hash pepper is this long; in [min, max]
        },
        "wellknown": {
            "cacheTime": "1h", // well-known/SRV entries are cached this long before re-requesting
            "failTime": "10m", // failed well-known/SRV lookups are cached as failed for this long
            "requestTimeout": "5s", // timeout when looking up homeservers via .well-known or SRV record before a request is considered failed
            "requestMaxSize": 50000, // truncate reply after this many bytes (protection against malicious servers)
        },
        "register": {
            "maxTime": "24h", // max. allowable session length until clients need to request a new token
        },
        "hashes": {
            // per-hash settings:
            // lazy [bool]: regenerate hashes only when a client asks for a hash of this type. Saves RAM. Default: true
            // default:  { "lazy": true  },
            "sha256":    { "lazy": true  }, // must be present and enabled according to the matrix spec
            "none":      { "lazy": true  }, // if enabled, allows for bulk lookup and substring matching
            "sha512":    { "lazy": true  },
            "sha3-512":  { "lazy": true  },
        },
        "minSearchLen": 2, // any search term must be at least this long; else it's ignored
        "media": { // field => medium
            "mail": "email",
        }
    },

    // -- Global data storage and acquisition ---
    "sources": {
        // Directory name where we store our database upon quitting, and load it when starting.
        // Leave away, set None or "" to not store anything on disk. Use "." to use working directory.
        // If you run multiple instances for whatever reason, each instance needs its own storage directory.
        "directory": ".",
        
        /* Completely purge & reload the entire 3pid tree every now and then.
           Fetches all sources as if on program startup, then atomically replaces the tree once everything is loaded.
           Gets rid of stale entries. Clears hash caches. Comment out to never purge (not recommended). */
        "purgeEvery": "3h",
        
        /* Fetching sources happens as follows:
        exec: Executes this file/script/program and parses its stdout as JSON.
              - Can either use a string to exec that file without parameters
              - Can also use an array to specify file name and parameters
        load: Load this file as JSON.
        every: takes a time delay to do this action repeatly
               (If not present, this is done only once on startup)
        check: By default, each exec'd source is checked during startup to ensure the process will execute cleanly.
               External scripts can use this to eg. check that all required dependencies are available on the system.
               For the check, the process is run with --check as its only parameter. If it exits with status 0,
               the check is considered successful.
               If one check fails the process will terminate on startup and display a big honking error.
               (default: true. Set to false to skip the check.)
        ----
        Each resulting json tree is kept separately. Whenever the 3pid database is updated,
        ie. one source has been loaded or executed, all trees are merged to the final 3pid tree.
        (This is to make sure no deleted entries linger in the 3pid tree)
        */
        "list": [
            // Some examples:
            // Load a JSON file from disk
            //{ "load": "example_users.json" },
            
            // Call a script that outputs JSON
            //{ "exec": "example_users.sh", "every": "30m", "check": true },
            
            // Feel free to write your own data importer and call it here.
            // The format is:
            // { "mxid": { data... } ... }
            // Where medium is something like phone or email, 3pid is your identifier and mxid is the associated matrix account name.
            // (Yes you can have multiple 3pids of the same medium map to a single mxid!)
            // You can also provide multiple media in one go.
            
            //{ "exec": "3pid/fakeusers", "every": "30m", "check": false },
            //{ "exec": "3pid/fakestud", "every": "30m", "check": false },
        ],
    },
    
    // environment variables passed to external processes. Put passwords and stuff here.
    "env": {
        // "MY_ENV_VAR": "whatever",
    },
}
