// Example how to configure user sources.
// maiden has no external depencies; our user list can come from anywhere,
// either a JSON file or a script that prints JSON.
// ---
// Included is a python script that can fetch users from LDAP
// and do some basic regex matching to create new fields from existing LDAP fields.
// The list can contain any number of entries in case you have multiple sources for user data,
// eg. one search base for students and a separate one for employees.
{
"sources":{
    "list":[
        // Can either specify parameters directly...
        // (On windows this will fail because a .py file is not executable.
        //  maiden will automatically look for a .bat file and run that instead)
        
        // By default, the script uses the field called "mxid" as the matrix ID.
        // Use --mxid to specify a different field name if necessary
        // In this example, we fetch the fields matrixUser, displayname, mail from LDAP,
        // and do no further processing.
        { "exec": [ "scripts/ldap.py",
            "--ldap-host", "ldaps://ad.example.com:3269",
            "--ldap-pass", "secret",
            "--ldap-binddn", "OU=Users,DC=example,DC=org",
            "--ldap-base", "CN=My User,OU=Users,DC=example,DC=org",
            "--ldap-filter", "(&(mail=*@*)(!(mail=*.DISABLED)))",
            "--mxid", "matrixUser", // By default
            "--output", "displayname,mail"
        ]},
        
        // In this example the matrix username is derived from the email,
        // and the displayname is built from other fields that are either generated on the fly
        // as intermediates or directly fetched from LDAP.
        // -> Any field that is not generated is fetched from LDAP.
        // Any regex that does not match (eg. because the email does not end in "@example.com")
        // causes that user to be skipped and not included in the output.
        // (The field is already called "mxid" so we don't need --mxid here)
        { "exec": [ "scripts/ldap.py",
            "--ldap-host", "ldaps://ad.example.com:3269",
            "--ldap-pass", "secret",
            "--ldap-binddn", "OU=Users,DC=example,DC=org",
            "--ldap-base", "CN=My User,OU=Users,DC=example,DC=org",
            "--ldap-filter", "(&(mail=*@*)(!(mail=*.DISABLED)))",
            // Assign intermdiate fields based on Python formatting expressions
            // See https://docs.python.org/3/library/string.html#formatspec
            // In short, refer to other fields in {}.
            "--format", "realname={givenName} {sn}", // <-- Both are fetched from LDAP
            // realname is generated in the prev line, sAMAccountName is fetched from LDAP
            "--format", "displayname={realname} ({sAMAccountName})",
            /*          +-- Assign the final result to this field
                        |
                        |     + Match this (this is a python formatting expression)
                        |     |
                        |     |        +-- The usual regex   +-- End result:
                        |     |        |   match with        |   Insert match
                        v     v        v   a capture         v   group 0     */
            "--regex", "mxid={mail}", "(.+)@example.com", "@{0}:example.com",
            "--output", "displayname,mail"
        ]},
        
        // ... or just do this and speficy everything else in the script.
        // (again, windows will fail to exec .sh files, so the .bat file with the same name is used instead)
        { "exec": "./example_ldap2.sh" },
    ]
}
}
